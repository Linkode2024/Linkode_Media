name: Node.js CI/CD with Docker Swarm
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [ closed ]
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      # - name: Build project
      #   run: npm run build  # 필요한 경우 주석 해제

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Build Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PWD }}
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:${{ github.sha }} .
          docker images
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.WAS_HOST }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.WAS_PORT }}
          script: |
            echo "${{ secrets.DOCKER_HUB_PWD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
            
            # Docker Swarm 서비스 업데이트 또는 생성
            if docker service ls | grep -q "my-app"; then
              docker service update --image ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:${{ github.sha }} \
                                    --update-parallelism 1 \
                                    --update-delay 10s \
                                    my-app
            else
              docker service create --name my-app \
                                    --replicas 2 \
                                    --publish 9000:3000 \
                                    --update-parallelism 1 \
                                    --update-delay 10s \
                                    ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:${{ github.sha }}
            fi
            
            # 서비스 로그 확인
            docker service logs --tail 100 my-app
            
            # 사용하지 않는 도커 이미지 제거
            docker image prune -f